package appu26j;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import org.lwjgl.input.Keyboard;

import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;

import appu26j.config.Config;
import appu26j.events.entity.EventTick;
import appu26j.events.mc.EventKey;
import appu26j.gui.DragGUI;
import appu26j.gui.MusicPlayerGUI;
import appu26j.gui.quickplay.QuickPlayGUI;
import appu26j.interfaces.MinecraftInterface;
import appu26j.mods.ModsManager;
import appu26j.settings.SettingsManager;
import appu26j.utils.Fonts;
import appu26j.utils.UpdateUtil;

public enum Apple implements MinecraftInterface
{
	CLIENT;
	
	public static final File DEFAULT_DIRECTORY = new File(System.getProperty("user.home"), "appleclient"), CONFIG = new File(DEFAULT_DIRECTORY, "config.json"), ACCOUNT = new File(DEFAULT_DIRECTORY, "account.txt");
    private ArrayList<String> usersPlayingAppleClient = new ArrayList<>(), specialPeople = new ArrayList<>();
	public static final String VERSION = "2.19", TITLE = "Apple Client " + VERSION;
	private AppleClientVersionChecker appleClientVersionChecker;
    private long time = System.currentTimeMillis();
	private SettingsManager settingsManager;
    private MusicPlayerGUI musicPlayerGUI;
    private QuickPlayGUI quickPlayGUI;
	private ModsManager modsManager;
	private EventBus eventBus;
	private DragGUI dragGUI;
	private Config config;
	
	static
	{
		if (!DEFAULT_DIRECTORY.exists())
		{
			DEFAULT_DIRECTORY.mkdirs();
		}
	}
	
	public void initialize()
	{
		this.appleClientVersionChecker = new AppleClientVersionChecker();
		this.settingsManager = new SettingsManager().initialize();
        this.eventBus = new EventBus("Apple Client Event Bus");
		this.modsManager = new ModsManager().initialize();
        this.musicPlayerGUI = new MusicPlayerGUI();
        this.quickPlayGUI = new QuickPlayGUI();
		this.dragGUI = new DragGUI();
		this.config = new Config();
		File musicFolder = new File("music");
		
		if (!musicFolder.exists())
		{
		    musicFolder.mkdirs();
		}
		
		BuiltInResourcePackDownloader.downloadPack();
		this.appleClientVersionChecker.run();
		this.eventBus.register(this);
        UpdateUtil.addHook();
        Fonts.initialize();
	}
	
	@Subscribe
	public void onKey(EventKey e)
	{
		if (e.getKey() == Keyboard.KEY_RSHIFT)
		{
			this.mc.displayGuiScreen(this.dragGUI.initialize());
		}
		
		if (e.getKey() == Keyboard.KEY_M)
		{
		    this.mc.displayGuiScreen(this.musicPlayerGUI);
		}
	}
	
	@Subscribe
	public void onTick(EventTick e)
	{
	    if ((this.time + 30000) < System.currentTimeMillis())
	    {
	        new Thread(() ->
	        {
	            HttpURLConnection httpURLConnection = null;
	            InputStreamReader inputStreamReader = null;
	            BufferedReader bufferedReader = null;
	            
	            try
	            {
                    ArrayList<String> temp = new ArrayList<>();
	                httpURLConnection = (HttpURLConnection) new URL("http://217.160.192.85:10023/uuidlist").openConnection();
	                httpURLConnection.setDoInput(true);
	                httpURLConnection.setDoOutput(true);
	                httpURLConnection.connect();
	                inputStreamReader = new InputStreamReader(httpURLConnection.getInputStream());
	                bufferedReader = new BufferedReader(inputStreamReader);
	                String line;
	                
	                while ((line = bufferedReader.readLine()) != null)
	                {
                        temp.add(line);
	                }
	                
                    this.usersPlayingAppleClient.clear();
                    this.usersPlayingAppleClient.addAll(temp);
	            }
	            
	            catch (Exception exception)
	            {
	                ;
	            }
	            
	            finally
	            {
	                if (bufferedReader != null)
	                {
	                    try
	                    {
	                        bufferedReader.close();
	                    }
	                    
	                    catch (Exception exception)
	                    {
	                        ;
	                    }
	                }
	                
	                if (inputStreamReader != null)
                    {
                        try
                        {
                            inputStreamReader.close();
                        }
                        
                        catch (Exception exception)
                        {
                            ;
                        }
                    }
	                
	                if (httpURLConnection != null)
                    {
                        httpURLConnection.disconnect();
                    }
	            }
	        }).start();
	        
	        this.time = System.currentTimeMillis();
	    }
	}
	
	public AppleClientVersionChecker getVersionChecker()
	{
		return this.appleClientVersionChecker;
	}
	
	public SettingsManager getSettingsManager()
	{
		return this.settingsManager;
	}
	
	public ModsManager getModsManager()
	{
		return this.modsManager;
	}
	
	public EventBus getEventBus()
	{
		return this.eventBus;
	}
	
	public DragGUI getDragGUI()
	{
		return this.dragGUI;
	}
	
	public Config getConfig()
	{
		return this.config;
	}
	
	public void shutdown()
	{
		this.eventBus.unregister(this);
	}
	
	public ArrayList<String> getSpecialPeople()
	{
	    return this.specialPeople;
	}
	
	public ArrayList<String> getPeopleUsingAppleClient()
    {
	    return this.usersPlayingAppleClient;
    }
	
	public void connectToServer()
	{
        new Thread(() ->
        {
            HttpURLConnection httpURLConnection = null;
            
            try
            {
                httpURLConnection = (HttpURLConnection) new URL("http://217.160.192.85:10023/adduuid/?uuid=" + this.mc.getSession().getPlayerID()).openConnection();
                httpURLConnection.setDoInput(true);
                httpURLConnection.setDoOutput(true);
                httpURLConnection.connect();
                httpURLConnection.getInputStream();
            }
            
            catch (Exception exception)
            {
                ;
            }
            
            finally
            {
                if (httpURLConnection != null)
                {
                    httpURLConnection.disconnect();
                }
            }
        }).start();
        
        new Thread(() ->
        {
            HttpURLConnection httpURLConnection = null;
            InputStreamReader inputStreamReader = null;
            BufferedReader bufferedReader = null;
            
            try
            {
                httpURLConnection = (HttpURLConnection) new URL("http://217.160.192.85:10023/specialpeople").openConnection();
                httpURLConnection.setDoInput(true);
                httpURLConnection.setDoOutput(true);
                httpURLConnection.connect();
                inputStreamReader = new InputStreamReader(httpURLConnection.getInputStream());
                bufferedReader = new BufferedReader(inputStreamReader);
                String line;
                
                while ((line = bufferedReader.readLine()) != null)
                {
                    this.specialPeople.add(line);
                }
            }
            
            catch (Exception exception)
            {
                ;
            }
            
            finally
            {
                if (bufferedReader != null)
                {
                    try
                    {
                        bufferedReader.close();
                    }
                    
                    catch (Exception exception)
                    {
                        ;
                    }
                }
                
                if (inputStreamReader != null)
                {
                    try
                    {
                        inputStreamReader.close();
                    }
                    
                    catch (Exception exception)
                    {
                        ;
                    }
                }
                
                if (httpURLConnection != null)
                {
                    httpURLConnection.disconnect();
                }
            }
        }).start();
	}
	
	public void disconnectFromServer()
    {
	    new Thread(() ->
        {
            HttpURLConnection httpURLConnection = null;
            
            try
            {
                httpURLConnection = (HttpURLConnection) new URL("http://217.160.192.85:10023/removeuuid/?uuid=" + this.mc.getSession().getPlayerID()).openConnection();
                httpURLConnection.setDoInput(true);
                httpURLConnection.setDoOutput(true);
                httpURLConnection.connect();
                httpURLConnection.getInputStream();
            }
            
            catch (Exception exception)
            {
                ;
            }
            
            finally
            {
                if (httpURLConnection != null)
                {
                    httpURLConnection.disconnect();
                }
            }
        }).start();
    }
	
	public QuickPlayGUI getQuickPlayGUI()
	{
	    return this.quickPlayGUI;
	}
}
